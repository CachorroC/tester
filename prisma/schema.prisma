generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carpeta {
  category        Category      @default(SinEspecificar)
  fecha           DateTime?
  idProcesos      Int[]
  idRegUltimaAct  Int?
  llaveProceso    String
  nombre          String
  notas           Nota[]
  numero          Int           @id
  procesos        Proceso[]
  revisado        Boolean       @default(false)
  tareas          Tarea[]
  terminado       Boolean       @default(false)
  ultimaActuacion Actuacion?    @relation(fields: [idRegUltimaAct], references: [idRegActuacion])
  updatedAt       DateTime      @updatedAt
}



model Nota {
  carpeta       Carpeta? @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero Int?
  content       String?
  createdAt     DateTime @default(now())
  date          DateTime
  id            Int      @id @default(autoincrement())
  pathname      String?
  title         String
  updatedAt     DateTime @updatedAt
}

model Tarea {
  Carpeta       Carpeta?   @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero Int?
  complete      Boolean    @default(false)
  content       String?
  createdAt     DateTime   @default(now())
  dueDate       DateTime?  @db.Date
  id            Int        @id @default(autoincrement())
  subTareas     SubTarea[]
  title         String
  updatedAt     DateTime   @updatedAt
}

model SubTarea {
  date       DateTime?
  id         Int       @id @default(autoincrement())
  isComplete Boolean   @default(false)
  Tarea      Tarea?    @relation(fields: [tareaId], references: [id])
  tareaId    Int?
  text       String
}

model Actuacion {
  id Int @id @default(autoincrement())
  actuacion      String
  anotacion      String?
  cant           Int
  carpetas       Carpeta[]
  carpetaNumero  Int?
  codRegla       String
  conDocumentos  Boolean
  consActuacion  Int
  createdAt      DateTime  @default(now())
  fechaActuacion DateTime  @db.Date
  fechaFinal     DateTime? @db.Date
  fechaInicial   DateTime? @db.Date
  fechaRegistro  DateTime  @db.Date
  idProceso      Int
  idRegActuacion Int       @unique
  isUltimaAct    Boolean
  llaveProceso   String
  proceso        Proceso?   @relation(fields: [procesoId], references: [idProceso])
  procesoId Int?
}



model Juzgado {
  id       Int
  procesos Proceso[]
  tipo     String    @id
  url      String
}

model Proceso {
  id Int @id @default(autoincrement())
  cantFilas            Int
  carpeta              Carpeta     @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero        Int
  departamento         String
  despacho             String
  esPrivado            Boolean
  fechaProceso         DateTime?   @db.Date
  fechaUltimaActuacion DateTime?   @db.Date
  idConexion           Int
  idProceso            Int         @unique
  juzgado              Juzgado     @relation(fields: [juzgadoTipo], references: [tipo])
  juzgadoTipo          String
  llaveProceso         String
  sujetosProcesales    String
  actuaciones          Actuacion[]
}

enum NotifierName {
  DOS91
  DOS92
}

enum Category {
  Terminados
  LiosJuridicos
  Bancolombia
  Reintegra
  Insolvencia
  SinEspecificar
  todos
}

enum Departamento {
  BOGOTA
  CUNDINAMARCA
  META
  ANTIOQUIA
  ATLANTICO
}

enum TipoProceso {
  HIPOTECARIO
  PRENDARIO
  SINGULAR
  ACUMULADO
}
