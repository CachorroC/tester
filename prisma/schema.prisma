generator client {
  provider = "prisma-client-js"
}
generator jsonSchema {
  provider = "prisma-json-schema-generator"
    includeRequiredFields = "true"
      persistOriginalType = "true"
       forceAnyOf = "true"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carpeta {
  category        Category      @default(SinEspecificar)
  codeudor        Codeudor?
  demanda         Demanda?
  deudor          Deudor?
  fecha           DateTime?
  idProcesos      Int[]
  idRegUltimaAct  Int?
  llaveProceso    String
  nombre          String
  notas           Nota[]
  notificacion    Notificacion?
  numero          Int           @id
  procesos        Proceso[]
  revisado        Boolean       @default(false)
  tareas          Tarea[]
  terminado       Boolean       @default(false)
  ultimaActuacion Actuacion?    @relation(fields: [idRegUltimaAct], references: [idRegActuacion])
  updatedAt       DateTime      @updatedAt
}

model Deudor {
  carpeta         Carpeta @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero   Int     @unique
  cedula          String
  direccion       String?
  email           String?
  id              Int     @id @default(autoincrement())
  primerApellido  String
  primerNombre    String
  segundoApellido String?
  segundoNombre   String?
  telCelular      String?
  telFijo         String?
}

model Codeudor {
  Carpeta       Carpeta @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero Int     @unique
  cedula        String?
  direccion     String?
  id            Int     @id
  nombre        String?
  telefono      String?
}

model Nota {
  carpeta       Carpeta? @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero Int?
  content       String?
  createdAt     DateTime @default(now())
  date          DateTime
  id            Int      @id @default(autoincrement())
  pathname      String?
  title         String
  updatedAt     DateTime @updatedAt
}

model Tarea {
  Carpeta       Carpeta?   @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero Int?
  complete      Boolean    @default(false)
  content       String?
  createdAt     DateTime   @default(now())
  dueDate       DateTime?  @db.Date
  id            Int        @id @default(autoincrement())
  subTareas     SubTarea[]
  title         String
  updatedAt     DateTime   @updatedAt
}

model SubTarea {
  date       DateTime?
  id         Int       @id @default(autoincrement())
  isComplete Boolean   @default(false)
  Tarea      Tarea?    @relation(fields: [tareaId], references: [id])
  tareaId    Int?
  text       String
}

model Actuacion {
  actuacion        String
  anotacion        String?
  cant             Int
  Carpeta          Carpeta[]
  carpetaNumero    Int?
  codRegla         String
  conDocumentos    Boolean
  consActuacion    Int
  createdAt        DateTime  @default(now())
  fechaActuacion   DateTime  @db.Date
  fechaFinal       DateTime? @db.Date
  fechaInicial     DateTime? @db.Date
  fechaRegistro    DateTime  @db.Date
  idProceso        Int
  idRegActuacion   Int       @id
  isUltimaAct      Boolean
  llaveProceso     String
  perteneceA       Proceso  @relation(fields: [idProceso], references: [idProceso])
}

model Demanda {
  capitalAdeudado         Decimal?           @db.Money
  carpeta                 Carpeta            @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero           Int                @unique
  departamento            String?
  despacho                String?
  entregaGarantiasAbogado DateTime?          @db.Date
  etapaProcesal           String?
  expediente              String?
  fechaPresentacion       DateTime[]         @db.Date
  id                      Int                @id @default(autoincrement())
  mandamientoPago         DateTime?          @db.Date
  medidasCautelares       MedidasCautelares? @relation(fields: [medidasCautelaresId], references: [id])
  medidasCautelaresId     Int?
  municipio               String?
  obligacion              String[]
  radicado                String?
  tipoProceso             TipoProceso        @default(SINGULAR)
  vencimientoPagare       DateTime[]         @db.Date
}

model Notificacion {
  autoNotificado String?
  carpeta        Carpeta    @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero  Int        @unique
  certimail      Boolean?
  fisico         Boolean?
  id             Int        @id @default(autoincrement())
  notifiers      Notifier[]
}

model MedidasCautelares {
  Demanda           Demanda[]
  fechaOrdenaMedida DateTime?
  id                Int       @id @default(autoincrement())
  medidaSolicitada  String?
}

model Notifier {
  fechaAporta    DateTime?
  fechaRecibido  DateTime?
  id             Int           @id @default(autoincrement())
  Notificacion   Notificacion? @relation(fields: [notificacionId], references: [id])
  notificacionId Int?
  resultado      Boolean?
  tipo           String
}

model Juzgado {
  id       Int
  procesos Proceso[]
  tipo     String    @id
  url      String
}

model Proceso {
  cantFilas            Int
  carpetaOfProceso     Carpeta     @relation(fields: [carpetaNumero], references: [numero])
  carpetaNumero        Int
  departamento         String
  despacho             String
  esPrivado            Boolean
  fechaProceso         DateTime?   @db.Date
  fechaUltimaActuacion DateTime?   @db.Date
  idConexion           Int
  idProceso            Int         @id
  juzgado              Juzgado     @relation(fields: [juzgadoTipo], references: [tipo])
  juzgadoTipo          String
  llaveProceso         String
  sujetosProcesales    String
  actuaciones          Actuacion[]
}

enum NotifierName {
  DOS91
  DOS92
}

enum Category {
  Terminados
  LiosJuridicos
  Bancolombia
  Reintegra
  Insolvencia
  SinEspecificar
  todos
}

enum Departamento {
  BOGOTA
  CUNDINAMARCA
  META
  ANTIOQUIA
  ATLANTICO
}

enum TipoProceso {
  HIPOTECARIO
  PRENDARIO
  SINGULAR
  ACUMULADO
}
